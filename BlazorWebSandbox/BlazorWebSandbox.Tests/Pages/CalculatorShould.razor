@using BlazorWebSandbox.Pages
@attribute [TestClass]
@inherits BunitTestContext

@code {
	IRenderedFragment UnderTest;

	[TestInitialize]
	public void Initialize()
	{
		UnderTest = Render(@<Calculator />);
	}

    [TestMethod]
	public void Show_calculator_header()
	{
		UnderTest.Find("h1").MarkupMatches(@<h1>FAIL THE TEST</h1>);
	}

    [TestMethod]
	public void Show_0_in_display()
	{
		UnderTest.Find("p#displayValue").MarkupMatches(@<p id="displayValue">0</p>);
	}

    [TestMethod]
	[DataRow("one", "1")]
	[DataRow("two", "2")]
	[DataRow("three", "3")]
	// Consider splitting into seperate test
	[DataRow("plus", "+")]
	[DataRow("equals", "=")]
	public void Show_a_button_for_expected_value(string elementId, string expected)
	{
		var buttonValue = UnderTest.Find($"button#{elementId}").InnerHtml;

		Assert.AreEqual(expected, buttonValue);
	}

	[TestMethod]
	[DataRow("one", "1")]
	[DataRow("two", "2")]
	[DataRow("three", "3")]
	public void Set_display_to_expected(string elementId, string expected)
	{
		UnderTest.Find($"button#{elementId}").Click();

		var displayValue = UnderTest.Find("p#displayValue").InnerHtml;

		Assert.AreEqual(expected, displayValue);
	}

	[TestMethod]
	public void Set_display_to_11()
	{
		UnderTest.Find("button#one").Click();
		UnderTest.Find("button#one").Click();

		UnderTest.Find("p#displayValue").MarkupMatches(@<p id="displayValue">11</p>);
	}
}
